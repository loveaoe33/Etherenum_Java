package lib;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class UserPrice extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_ACCOUNTWITHDRAW = "accountWithdraw";

    public static final String FUNC_APPROVUSER = "approvUser";

    public static final String FUNC_CHECKNODE = "checkNode";

    public static final String FUNC_GETTEST = "getTest";

    public static final String FUNC_GETUSER = "getUser";

    public static final String FUNC_GETUSER_STRING = "getUser_String";

    public static final String FUNC_SETUSER = "setUser";

    public static final String FUNC_TRANSPRICE = "transPrice";

    public static final String FUNC_UPDATEUSER = "updateUser";

    public static final Event ADMINUPDATEUSERRECODE_EVENT = new Event("AdminUpdateUserRecode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSACTIONRECORD_EVENT = new Event("TransactionRecord", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event USERRESGISTER_EVENT = new Event("UserResgister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected UserPrice(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserPrice(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserPrice(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserPrice(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AdminUpdateUserRecodeEventResponse> getAdminUpdateUserRecodeEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADMINUPDATEUSERRECODE_EVENT, transactionReceipt);
        ArrayList<AdminUpdateUserRecodeEventResponse> responses = new ArrayList<AdminUpdateUserRecodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminUpdateUserRecodeEventResponse typedResponse = new AdminUpdateUserRecodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.updateAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.updateData = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.updateAdmin = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.updateDate = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AdminUpdateUserRecodeEventResponse getAdminUpdateUserRecodeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADMINUPDATEUSERRECODE_EVENT, log);
        AdminUpdateUserRecodeEventResponse typedResponse = new AdminUpdateUserRecodeEventResponse();
        typedResponse.log = log;
        typedResponse.updateAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.updateData = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.updateAdmin = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.updateDate = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<AdminUpdateUserRecodeEventResponse> adminUpdateUserRecodeEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAdminUpdateUserRecodeEventFromLog(log));
    }

    public Flowable<AdminUpdateUserRecodeEventResponse> adminUpdateUserRecodeEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINUPDATEUSERRECODE_EVENT));
        return adminUpdateUserRecodeEventFlowable(filter);
    }

    public static List<TransactionRecordEventResponse> getTransactionRecordEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONRECORD_EVENT, transactionReceipt);
        ArrayList<TransactionRecordEventResponse> responses = new ArrayList<TransactionRecordEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionRecordEventResponse typedResponse = new TransactionRecordEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.transRemark = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.transDate = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransactionRecordEventResponse getTransactionRecordEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONRECORD_EVENT, log);
        TransactionRecordEventResponse typedResponse = new TransactionRecordEventResponse();
        typedResponse.log = log;
        typedResponse.fromAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.toAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.transRemark = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.transDate = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<TransactionRecordEventResponse> transactionRecordEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionRecordEventFromLog(log));
    }

    public Flowable<TransactionRecordEventResponse> transactionRecordEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONRECORD_EVENT));
        return transactionRecordEventFlowable(filter);
    }

    public static List<UserResgisterEventResponse> getUserResgisterEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USERRESGISTER_EVENT, transactionReceipt);
        ArrayList<UserResgisterEventResponse> responses = new ArrayList<UserResgisterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserResgisterEventResponse typedResponse = new UserResgisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.resAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.adminAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.approvDate = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserResgisterEventResponse getUserResgisterEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERRESGISTER_EVENT, log);
        UserResgisterEventResponse typedResponse = new UserResgisterEventResponse();
        typedResponse.log = log;
        typedResponse.resAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.adminAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.approvDate = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<UserResgisterEventResponse> userResgisterEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserResgisterEventFromLog(log));
    }

    public Flowable<UserResgisterEventResponse> userResgisterEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERRESGISTER_EVENT));
        return userResgisterEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> accountWithdraw() {
        final Function function = new Function(
                FUNC_ACCOUNTWITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approvUser(String NodeAddress, String Admin,
            String Account, String ApprovDate, Boolean IsVail) {
        final Function function = new Function(
                FUNC_APPROVUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(NodeAddress), 
                new org.web3j.abi.datatypes.Utf8String(Admin), 
                new org.web3j.abi.datatypes.Utf8String(Account), 
                new org.web3j.abi.datatypes.Utf8String(ApprovDate), 
                new org.web3j.abi.datatypes.Bool(IsVail)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkNode(String HashAddress) {
        final Function function = new Function(FUNC_CHECKNODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(HashAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getTest() {
        final Function function = new Function(FUNC_GETTEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getUser(String NodeAddress, String Account) {
        final Function function = new Function(FUNC_GETUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(NodeAddress), 
                new org.web3j.abi.datatypes.Utf8String(Account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getUser_String(Users data) {
        final Function function = new Function(FUNC_GETUSER_STRING, 
                Arrays.<Type>asList(data), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setUser(String NodeAddress, String UserAccount,
            String UserPassword, BigInteger AccountLevel, BigInteger UserInitPrice,
            String CreatDate, String UpdateDate, String LastTransDate, String LastTransTag,
            String CreatName, Boolean IsVial) {
        final Function function = new Function(
                FUNC_SETUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(NodeAddress), 
                new org.web3j.abi.datatypes.Utf8String(UserAccount), 
                new org.web3j.abi.datatypes.Utf8String(UserPassword), 
                new org.web3j.abi.datatypes.generated.Int256(AccountLevel), 
                new org.web3j.abi.datatypes.generated.Int256(UserInitPrice), 
                new org.web3j.abi.datatypes.Utf8String(CreatDate), 
                new org.web3j.abi.datatypes.Utf8String(UpdateDate), 
                new org.web3j.abi.datatypes.Utf8String(LastTransDate), 
                new org.web3j.abi.datatypes.Utf8String(LastTransTag), 
                new org.web3j.abi.datatypes.Utf8String(CreatName), 
                new org.web3j.abi.datatypes.Bool(IsVial)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transPrice(String FromAccount,
            BigInteger TransPrice, String TransAccount, String TransRemark, String TransDate) {
        final Function function = new Function(
                FUNC_TRANSPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(FromAccount), 
                new org.web3j.abi.datatypes.generated.Int256(TransPrice), 
                new org.web3j.abi.datatypes.Utf8String(TransAccount), 
                new org.web3j.abi.datatypes.Utf8String(TransRemark), 
                new org.web3j.abi.datatypes.Utf8String(TransDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateUser(String NodeAddress, String Admin,
            String UpdateAccount, String UserPword, BigInteger AccountLevel,
            BigInteger AccountPrice, String PriceRemark, String UpdateDate, String CreateName,
            Boolean AccountIsVial) {
        final Function function = new Function(
                FUNC_UPDATEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(NodeAddress), 
                new org.web3j.abi.datatypes.Utf8String(Admin), 
                new org.web3j.abi.datatypes.Utf8String(UpdateAccount), 
                new org.web3j.abi.datatypes.Utf8String(UserPword), 
                new org.web3j.abi.datatypes.generated.Int256(AccountLevel), 
                new org.web3j.abi.datatypes.generated.Int256(AccountPrice), 
                new org.web3j.abi.datatypes.Utf8String(PriceRemark), 
                new org.web3j.abi.datatypes.Utf8String(UpdateDate), 
                new org.web3j.abi.datatypes.Utf8String(CreateName), 
                new org.web3j.abi.datatypes.Bool(AccountIsVial)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static UserPrice load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new UserPrice(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserPrice load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserPrice(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserPrice load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new UserPrice(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserPrice load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserPrice(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserPrice> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _testdata) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_testdata)));
        return deployRemoteCall(UserPrice.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<UserPrice> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider, String _testdata) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_testdata)));
        return deployRemoteCall(UserPrice.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<UserPrice> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String _testdata) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_testdata)));
        return deployRemoteCall(UserPrice.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<UserPrice> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit, String _testdata) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_testdata)));
        return deployRemoteCall(UserPrice.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

//    public static void linkLibraries(List<Contract.LinkReference> references) {
//        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
//    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Users extends DynamicStruct {
        public BigInteger id;

        public String userAccount;

        public String userPword;

        public BigInteger accountLevel;

        public BigInteger accountPrice;

        public String createDate;

        public String updateDate;

        public String lastTransDate;

        public String lastTransTag;

        public String createName;

        public Boolean accountIsVial;

        public Users(BigInteger id, String userAccount, String userPword, BigInteger accountLevel,
                BigInteger accountPrice, String createDate, String updateDate, String lastTransDate,
                String lastTransTag, String createName, Boolean accountIsVial) {
            super(new org.web3j.abi.datatypes.generated.Int256(id), 
                    new org.web3j.abi.datatypes.Utf8String(userAccount), 
                    new org.web3j.abi.datatypes.Utf8String(userPword), 
                    new org.web3j.abi.datatypes.generated.Int256(accountLevel), 
                    new org.web3j.abi.datatypes.generated.Int256(accountPrice), 
                    new org.web3j.abi.datatypes.Utf8String(createDate), 
                    new org.web3j.abi.datatypes.Utf8String(updateDate), 
                    new org.web3j.abi.datatypes.Utf8String(lastTransDate), 
                    new org.web3j.abi.datatypes.Utf8String(lastTransTag), 
                    new org.web3j.abi.datatypes.Utf8String(createName), 
                    new org.web3j.abi.datatypes.Bool(accountIsVial));
            this.id = id;
            this.userAccount = userAccount;
            this.userPword = userPword;
            this.accountLevel = accountLevel;
            this.accountPrice = accountPrice;
            this.createDate = createDate;
            this.updateDate = updateDate;
            this.lastTransDate = lastTransDate;
            this.lastTransTag = lastTransTag;
            this.createName = createName;
            this.accountIsVial = accountIsVial;
        }

        public Users(Int256 id, Utf8String userAccount, Utf8String userPword, Int256 accountLevel,
                Int256 accountPrice, Utf8String createDate, Utf8String updateDate,
                Utf8String lastTransDate, Utf8String lastTransTag, Utf8String createName,
                Bool accountIsVial) {
            super(id, userAccount, userPword, accountLevel, accountPrice, createDate, updateDate, lastTransDate, lastTransTag, createName, accountIsVial);
            this.id = id.getValue();
            this.userAccount = userAccount.getValue();
            this.userPword = userPword.getValue();
            this.accountLevel = accountLevel.getValue();
            this.accountPrice = accountPrice.getValue();
            this.createDate = createDate.getValue();
            this.updateDate = updateDate.getValue();
            this.lastTransDate = lastTransDate.getValue();
            this.lastTransTag = lastTransTag.getValue();
            this.createName = createName.getValue();
            this.accountIsVial = accountIsVial.getValue();
        }
    }

    public static class AdminUpdateUserRecodeEventResponse extends BaseEventResponse {
        public String updateAccount;

        public String oldData;

        public String updateData;

        public String updateAdmin;

        public String updateDate;
    }

    public static class TransactionRecordEventResponse extends BaseEventResponse {
        public String fromAccount;

        public String toAccount;

        public BigInteger price;

        public String transRemark;

        public String transDate;
    }

    public static class UserResgisterEventResponse extends BaseEventResponse {
        public String resAccount;

        public String adminAccount;

        public String approvDate;
    }
}
